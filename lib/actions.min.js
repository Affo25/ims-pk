// @ts-nocheck
import{cookies}from"next/headers";import ShortUniqueId from"short-unique-id";import{getFileExtension}from"@/lib/utils";import{createClient}from"@/lib/supabase-server";import{supabaseAdmin}from"@/lib/supabase-admin";import{apiKey,invoicesUrl,months,proposalsUrl,reportUrl,signatures}from"@/lib/data";import{format,differenceInDays,isBefore,isEqual,addDays}from"date-fns";const mandrill=require("@mailchimp/mailchimp_transactional")(process.env.MANDRILL_KEY);export const getUser=async()=>{const e=await createClient();let t=await e.auth.getUser();if(!t.data?.user||t.error)return{status:"ERROR",message:"Session has been expired",data:null};const a=t.data.user.id,s=t.data.user.email;return t=await e.from("users").select("*").eq("id",a),t.error?(await errorLogger("getUser()",t.error.message),{status:"ERROR",message:t.error.message,data:null}):t.data.length>0?(t.data[0].email=s,{status:"OK",message:null,data:t.data[0]}):{status:"ERROR",message:"Unable to get user",data:null}};export const getSalesManager=async e=>{const t=await createClient();let a=await supabaseAdmin.getUserById(e);if(!a.data?.user||a.error)return{status:"ERROR",message:"Could not get the sales manager.",data:null};const s=a.data.user.email;return a=await t.from("users").select("*").eq("id",e),a.error?(await errorLogger("getSalesManager()",a.error.message),{status:"ERROR",message:a.error.message,data:null}):a.data.length>0?(a.data[0].email=s,{status:"OK",message:null,data:a.data[0]}):{status:"ERROR",message:"Unable to get sales manager",data:null}};export const getUsers=async()=>{const e=await createClient(),t=await e.from("users").select("*").order("first_name",{ascending:!0});return t.error?(await errorLogger("getUsers()",t.error.message),{status:"ERROR",message:t.error.message,data:null}):{status:"OK",message:null,data:t.data}};export const editUser=async e=>{const t=await createClient(),a=await t.from("users").update({first_name:e.firstName,last_name:e.lastName,designation:e.designation,type:e.type,country:e.country,areas:e.areas}).eq("id",e.id);return a.error?(await errorLogger("editUser()",a.error.message),{status:"ERROR",message:a.error.message,data:null}):{status:"OK",message:null,data:null}};export const signInUser=async e=>{const t=await createClient(),a=await t.auth.signInWithPassword({email:e.email,password:e.password});return a.error?{status:"ERROR",message:a.error.message,data:null}:{status:"OK",message:null,data:null}};export const signUpUser=async()=>{const e=await createClient();return await e.auth.signUp({email:"",password:""})};export const signOutUser=async()=>{const e=await createClient();await e.auth.signOut()};export const getLeads=async()=>{const e=await createClient();const t=(await getUser()).data,a=await e.from("leads").select("*").neq("status","DELETED").order("name",{ascending:!0});return a.error?(await errorLogger("getLeads()",a.error.message),{status:"ERROR",message:a.error.message,data:null}):{status:"OK",message:null,data:a.data,user:t}};export const addLead=async e=>{const t=await createClient();let a=await getUser();const s=a.data;return a=await t.from("leads").insert({name:e.name,email:e.email.toLowerCase(),source:e.source||null,contact:e.contact,bound:e.bound||null,request:e.request,sale:e.sale||null,contact_status:e.contact_status||null,solution:e.solution||null,comments:e.comments||null,user_id:s.id,status:"ACTIVE",activity:[{message:"<p class='mb-0'>Lead added by "+s.first_name+"</p>",date_time:new Date}],created_at:new Date}).select(),a.error?(await errorLogger("addLead()",a.error.message),{status:"ERROR",message:a.error.message,data:null}):{status:"OK",message:null,data:null}};export const editLead=async e=>{const t=await createClient();let a=await getUser();const s=a.data;return a=await t.from("leads").update({name:e.name,email:e.email.toLowerCase(),source:e.source||null,contact:e.contact,bound:e.bound||null,request:e.request,sale:e.sale||null,contact_status:e.contact_status||null,solution:e.solution||null,comments:e.comments||null,activity:[{message:"<p class='mb-0'>Lead edited by "+s.first_name+"</p>",date_time:new Date}]}).eq("id",e.id),a.error?(await errorLogger("editLead()",a.error.message),{status:"ERROR",message:a.error.message,data:null}):{status:"OK",message:null,data:null}};export const deleteLead=async e=>{const t=await createClient();let a=await getUser();const s=a.data;return a=await t.from("leads").update({status:"DELETED",activity:[{message:"<p class='mb-0'>Inquiry deleted by "+s.first_name+"</p>",date_time:new Date}]}).eq("id",e.id),a.error?(await errorLogger("deleteLead()",a.error.message),{status:"ERROR",message:a.error.message,data:null}):{status:"OK",message:null,data:null}};export const getNewInquiries=async()=>{const e=await createClient(),t=await e.from("inquiries").select("*, user:users(*)").eq("status","NEW").order("start_datetime",{ascending:!0});return t.error?(await errorLogger("getNewInquiries()",t.error.message),{status:"ERROR",message:t.error.message,data:null}):{status:"OK",message:null,data:t.data}};export const getSubmittedInquiries=async()=>{const e=await createClient();let t=await e.from("inquiries").select("*, user:users(*)").eq("status","SUBMITTED").order("start_datetime",{ascending:!0});if(t.error)return await errorLogger("getSubmittedInquiries()",t.error.message),{status:"ERROR",message:t.error.message,data:null};let a=t.data;const s=a.map((e=>e.id)),r=await e.from("proposals").select("*").in("inquiry_id",s).order("created_at",{ascending:!1});if(r.error)return await errorLogger("getLatestProposals batch",r.error.message),{status:"ERROR",message:r.error.message,data:null};const n=r.data,o={};for(const e of n)o[e.inquiry_id]||(o[e.inquiry_id]=e);for(const e of a){const t=o[e.id];t&&(e.total_amount=t.total_amount)}return{status:"OK",message:null,data:a}};export const getConfirmedInquiries=async()=>{const e=await createClient(),t=await e.from("inquiries").select("*, user:users(*)").eq("status","CONFIRMED").order("start_datetime",{ascending:!0});return t.error?(await errorLogger("getConfirmedInquiries()",t.error.message),{status:"ERROR",message:t.error.message,data:null}):{status:"OK",message:null,data:t.data}};export const getLostInquiries=async()=>{const e=await createClient(),t=await e.from("inquiries").select("*, user:users(*)").eq("status","LOST").order("start_datetime",{ascending:!0});return t.error?(await errorLogger("getLostInquiries()",t.error.message),{status:"ERROR",message:t.error.message,data:null}):{status:"OK",message:null,data:t.data}};export const addInquiry=async e=>{const t=await createClient();let a=await getUser();const s=a.data;if(a=await t.from("inquiries").insert({name:e.name,company:e.company,country:e.country,email:e.email.toLowerCase(),contact:e.contact,source:e.source,bound:e.bound?e.bound:null,start_datetime:e.startDateTime?e.startDateTime:null,end_datetime:e.endDateTime?e.endDateTime:null,location:e.location?e.location:null,fish:e.fish?e.fish:null,scope_of_work:e.scopeOfWork.length>0?e.scopeOfWork:null,comments:e.comments?e.comments:null,lost_reason:null,follow_ups:{dates:null,status:"PENDING"},user_id:s.id,status:"NEW",activity:[{message:"<p class='mb-0'>Inquiry added by "+s.first_name+"</p>",date_time:new Date}],created_at:new Date}).select(),a.error)return await errorLogger("addInquiry()",a.error.message),{status:"ERROR",message:a.error.message,data:null};const r=a.data[0];if(a=await scheduleFollowupEmails(r.id),"ERROR"===a.status)return{status:"ERROR",message:a.message,data:null};const n={name:e.name,company:e.company,country:e.country,email:e.email.toLowerCase(),contact:e.contact,source:e.source,bound:e.bound,fish:e.fish,list:"PROSPECTS",subscribed:!0};return a=await addClient(n,"inquiry"),"ERROR"===a.status?{status:"ERROR",message:a.message,data:null}:{status:"OK",message:null,data:null}};export const editInquiry=async e=>{const t=await createClient();let a=await getUser();const s=a.data;if(a=await t.from("inquiries").select("*").eq("id",e.id),a.error)return await errorLogger("cancelFollowups()",a.error.message),{status:"ERROR",message:a.error.message,data:null};const r=a.data[0];if(!isEqual(r.start_datetime,e.startDateTime)){if(a=await t.from("campaigns").select("*, template:templates(*)").eq("status","PENDING").eq("type","AUTO"),a.error)return await errorLogger("editInquiry()",a.error.message),{status:"ERROR",message:a.error.message,data:null};const s=a.data;for(const r of s)if(r.name.toLowerCase().includes("follow up")){const s=r.name.lastIndexOf(" ");if(r.name.substring(s+1)===e.id&&(a=await t.from("campaigns").update({status:"CANCELLED"}).eq("id",r.id),a.error))return await errorLogger("editInquiry()",a.error.message),{status:"ERROR",message:a.error.message,data:null}}}if(a=await t.from("inquiries").update({name:e.name,company:e.company,country:e.country,email:e.email.toLowerCase(),contact:e.contact,source:e.source,bound:e.bound?e.bound:null,start_datetime:e.startDateTime?e.startDateTime:null,end_datetime:e.endDateTime?e.endDateTime:null,location:e.location?e.location:null,fish:e.fish?e.fish:null,scope_of_work:e.scopeOfWork.length>0?e.scopeOfWork:null,comments:e.comments?e.comments:null,activity:[...e.activity,{message:"<p class='mb-0'>Inquiry edited by "+s.first_name+"</p>",date_time:new Date},...isEqual(r.start_datetime,e.startDateTime)?[]:[{message:"<p class='mb-0'>Follow up emails cancelled by IMS</p>",date_time:new Date}]],...!isEqual(r.start_datetime,e.startDateTime)&&{follow_ups:{dates:null,status:"PENDING"}}}).eq("id",e.id),a.error)return await errorLogger("editInquiry()",a.error.message),{status:"ERROR",message:a.error.message,data:null};let n=await t.from("events").select("*").eq("inquiry_id",e.id);if(n.error)return await errorLogger("editInquiry()",n.error.message),{status:"ERROR",message:n.error.message,data:null};if(n.data.length>0){const a=n.data[0];if(n=await t.from("events").update({start_datetime:e.startDateTime?e.startDateTime:null,end_datetime:e.endDateTime?e.endDateTime:null,scope_of_work:e.scopeOfWork.length>0?e.scopeOfWork:null,activity:[...a.activity||[],{message:"<p class='mb-0'>Event logistics edited by "+s.first_name+"</p>",date_time:new Date}]}).eq("id",a.id),n.error)return await errorLogger("editInquiry()",n.error.message),{status:"ERROR",message:n.error.message,data:null}}return isEqual(r.start_datetime,e.startDateTime)||(a=await scheduleFollowupEmails(e.id),"ERROR"!==a.status)?{status:"OK",message:null,data:null}:{status:"ERROR",message:a.message,data:null}};export const deleteInquiry=async e=>{const t=await createClient();let a=await getUser();const s=a.data;return a=await t.from("inquiries").update({status:"DELETED",activity:[...e.activity,{message:"<p class='mb-0'>Inquiry deleted by "+s.first_name+"</p>",date_time:new Date}]}).eq("id",e.id),a.error?(await errorLogger("deleteInquiry()",a.error.message),{status:"ERROR",message:a.error.message,data:null}):{status:"OK",message:null,data:null}};export const confirmInquiry=async(e,t)=>{const a=await createClient();let s=await getUser();const r=s.data,n=t.map((e=>e.id));if(s=await a.from("proposals").update({confirmed:!0}).in("id",n),s.error)return await errorLogger("confirmInquiry()",s.error.message),{status:"ERROR",message:s.error.message,data:null};if(s=await getTemplate("CONFIRM-EMAIL"),"ERROR"===s.status)return{status:"ERROR",message:s.message,data:null};const o=s.data,i=e?.start_datetime?format(new Date(e?.start_datetime),"dd MMM yyyy"):"";if(s=await a.from("campaigns").insert({type:"AUTO",name:"IMS - Confirm email #"+e.id,template_id:o.id,list:null,send_to:[{name:e.name,email:e.email,company:e.company,startDate:i,ccList:["saqib@iboothme.ae","ben@iboothme.app","shubhneet@iboothme.com","modar@iboothme.com","gerald@iboothme.ae","alex@iboothme.ae","rg@studio94.ae","youssef@iboothme.ae"]}],send_on:new Date,user_id:r.id,status:"PENDING",created_at:new Date}),s.error)return await errorLogger("confirmInquiry()",s.error.message),{status:"ERROR",message:s.error.message,data:null};if(s=await a.from("inquiries").update({status:"CONFIRMED",activity:[...e.activity,{message:"<p class='mb-0'>Inquiry marked as confirmed by "+r.first_name+"</p>",date_time:new Date}]}).eq("id",e.id),s.error)return await errorLogger("confirmInquiry()",s.error.message),{status:"ERROR",message:s.error.message,data:null};if(s=await cancelFollowups(e.id),"ERROR"===s.status)return{status:"ERROR",message:s.message,data:null};if(s=await addEvent(e),"ERROR"===s.status)return{status:"ERROR",message:s.message,data:null};const l=s.data[0];return s=await addPayment(t,l),"ERROR"===s.status?(await errorLogger("addInvoice()",s.message),{status:"ERROR",message:s.error.message,data:null}):{status:"OK",message:null,data:null}};export const revertToSubmitted=async(e,t)=>{const a=await createClient();let s=await getUser();const r=s.data,n=t.map((e=>e.id));return s=await a.from("proposals").update({confirmed:!1}).in("id",n),s.error?(await errorLogger("revertToSubmitted()",s.error.message),{status:"ERROR",message:s.error.message,data:null}):(s=await a.from("inquiries").update({status:"SUBMITTED",activity:[...e.activity,{message:"<p class='mb-0'>Inquiry reverted to submitted by "+r.first_name+"</p>",date_time:new Date}]}).eq("id",e.id),s.error?(await errorLogger("revertToSubmitted()",s.error.message),{status:"ERROR",message:s.error.message,data:null}):{status:"OK",message:"Inquiry reverted to submitted successfully",data:null})};export const lostInquiry=async e=>{const t=await createClient();let a=await getUser();const s=a.data;if(a=await getTemplate("LOST-EMAIL"),"ERROR"===a.status)return{status:"ERROR",message:a.message,data:null};const r=a.data;return a=await t.from("campaigns").insert({type:"AUTO",name:"IMS - Lost email #"+e.id,template_id:r.id,list:null,send_to:[{name:e.name,email:e.email,company:e.company,ccList:["saqib@iboothme.ae","ben@iboothme.app","shubhneet@iboothme.com","modar@iboothme.com","youssef@iboothme.ae"]}],send_on:new Date,user_id:s.id,status:"PENDING",created_at:new Date}),a.error?(await errorLogger("lostInquiry()",a.error.message),{status:"ERROR",message:a.error.message,data:null}):(a=await t.from("inquiries").update({lost_reason:e.lost_reason,status:"LOST",activity:[...e.activity,{message:"<p class='mb-0'>Inquiry marked as lost by "+s.first_name+"</p>",date_time:new Date}]}).eq("id",e.id),a.error?(await errorLogger("lostInquiry()",a.error.message),{status:"ERROR",message:a.error.message,data:null}):(a=await cancelFollowups(e.id),"ERROR"===a.status?{status:"ERROR",message:a.message,data:null}:{status:"OK",message:null,data:null}))};export const getInternationalInquiries=async()=>{const e=await createClient(),t=await e.from("international_inquiries").select("*, users(*)").neq("status","DELETE").order("start_datetime",{ascending:!0});return t.error?(await errorLogger("getInternationalInquiries()",t.error.message),{status:"ERROR",message:t.error.message,data:null}):{status:"OK",message:null,data:t.data}};export const addInternationalInquiry=async e=>{const t=await createClient();let a=await getUser();const s=a.data;return a=await t.from("international_inquiries").insert({name:e.name,company:e.company,country:e.country,email:e.email.toLowerCase(),contact:e.contact,source:e.source,start_datetime:e.startDateTime||null,end_datetime:e.endDateTime||null,location:e.location||null,scope_of_work:e.scopeOfWork.length>0?e.scopeOfWork:null,comments:e.comments||null,lost_reason:null,follow_ups:{dates:null,status:"PENDING"},user_id:s.id,status:"PENDING",activity:[{message:`<p class='mb-0'>Inquiry added by ${s.first_name}</p>`,date_time:new Date}],created_at:new Date}).select(),a.error?(await errorLogger("addInternationalInquirySimple()",a.error.message),{status:"ERROR",message:a.error.message,data:null}):{status:"OK",message:"International Inquiry added successfully.",data:a.data[0]}};export const editInternationalInquirySimple=async e=>{const t=await createClient();let a=await getUser();const s=a.data;return a=await t.from("international_inquiries").update({name:e.name,company:e.company,country:e.country,email:e.email.toLowerCase(),contact:e.contact,source:e.source,start_datetime:e.startDateTime||null,end_datetime:e.endDateTime||null,location:e.location||null,scope_of_work:e.scopeOfWork.length>0?e.scopeOfWork:null,comments:e.comments||null,activity:[...e.activity||[],{message:`<p class='mb-0'>Inquiry edited by ${s.first_name}</p>`,date_time:new Date}]}).eq("id",e.id),a.error?(await errorLogger("editInternationalInquirySimple()",a.error.message),{status:"ERROR",message:a.error.message,data:null}):{status:"OK",message:"International Inquiry updated successfully.",data:null}};export const InternationalLostInquiry=async e=>{const t=await createClient();let a=await getUser();const s=a.data;return a=await t.from("international_inquiries").update({status:"LOST",activity:[...e.activity,{message:`<p class='mb-0'>Inquiry marked as lost by ${s.first_name}</p>`,date_time:new Date}]}).eq("id",e.id),a.error?(await errorLogger("InternationalLostInquiry()",a.error.message),{status:"ERROR",message:a.error.message,data:null}):{status:"OK",message:null,data:null}};export const InternationalConfirmInquiry=async e=>{const t=await createClient();let a=await getUser();const s=a.data;return a=await t.from("international_inquiries").update({status:"CONFIRM",activity:[...e.activity,{message:`<p class='mb-0'>Inquiry marked as confirmed by ${s.first_name}</p>`,date_time:new Date}]}).eq("id",e.id),a.error?(await errorLogger("InternationalConfirmInquiry()",a.error.message),{status:"ERROR",message:a.error.message,data:null}):{status:"OK",message:null,data:null}};export const getProposals=async e=>{const t=await createClient(),a=await t.from("proposals").select("*, inquiry:inquiries(*)").eq("inquiry_id",e).order("created_at",{ascending:!1});return a.error?(await errorLogger("getProposals()",a.error.message),{status:"ERROR",message:a.error.message,data:null}):{status:"OK",message:null,data:a.data}};export const getProposal=async e=>{const t=await createClient(),a=await t.from("proposals").select("*, inquiry:inquiries(*, user:users(*))").eq("number",e);return a.error?(await errorLogger("getProposal()",a.error.message),{status:"ERROR",message:a.error.message,data:null}):a.data.length>0?{status:"OK",message:null,data:a.data[0]}:{status:"ERROR",message:"Unable to get proposal",data:null}};export const getLatestProposal=async e=>{const t=await createClient(),a=await t.from("proposals").select("*").eq("inquiry_id",e).order("created_at",{ascending:!1});return a.error?(await errorLogger("getLatestProposal()",a.error.message),{status:"ERROR",message:a.error.message,data:null}):a.data.length>0?{status:"OK",message:null,data:a.data[0]}:{status:"ERROR",message:null,data:"Unable to get latest proposal"}};export const getConfirmedProposals=async e=>{const t=await createClient(),a=await t.from("proposals").select("*").eq("inquiry_id",e).eq("confirmed",!0).order("created_at",{ascending:!1});return a.error?(await errorLogger("getConfirmedProposals()",a.error.message),{status:"ERROR",message:a.error.message,data:null}):a.data.length>0?{status:"OK",message:null,data:a.data}:{status:"ERROR",message:null,data:"Unable to get confirmed proposals"}};export const addProposal=async(e,t)=>{const a=await createClient(),{randomUUID:s}=new ShortUniqueId({length:8}),r=s();let n=await getUser();const o=n.data;return n=await a.from("proposals").insert({number:r,title:e.title,details:e.details,subtotal_amount:e.subtotalAmount,vat_amount:e.vatAmount,total_amount:e.totalAmount,inquiry_id:t.id,inquiry_data:{name:t.name,email:t.email,company:t.company,contact:t.contact,country:t.country,user_id:t.user_id,comments:t.comments,location:t.location,start_datetime:t.start_datetime,end_datetime:t.end_datetime,scope_of_work:t.scope_of_work},confirmed:!1,created_at:new Date}),n.error?{status:"ERROR",message:n.error.message,data:null}:(n=await a.from("inquiries").update({activity:[...t.activity,{message:"<p class='mb-0'>Proposal <a class='fw-semibold' href='"+proposalsUrl+r+"' target='_blank'>#"+r+"</a> created by "+o.first_name+"</p>",date_time:new Date}]}).eq("id",t.id),n.error?(await errorLogger("addProposal()",n.error.message),{status:"ERROR",message:n.error.message,data:null}):{status:"OK",message:null,data:null})};export const sendProposals=async(e,t)=>{const a=await createClient();let s=await getUser();const r=s.data;if(s=await getTemplate("PROPOSAL-EMAIL"),"ERROR"===s.status)return{status:"ERROR",message:s.message,data:null};let n=s.data,o="",i=[],l="";e.forEach(((t,a)=>{const s=proposalsUrl+t.number;i.push(s),o+=t.number;const r="<a class='fw-semibold' href='"+s+"' target='_blank'>#"+t.number+"</a>";l+=r,a<e.length-1&&(o+=", ",l+=", ")})),s=await getSalesManager(t.user_id);const m=s.data,u=signatures[m.first_name.toLowerCase()],d=t?.start_datetime?format(new Date(t?.start_datetime),"dd MMM yyyy"):"";return s=await a.from("campaigns").insert({type:"AUTO",name:"IMS - Proposal(s) email #"+o,template_id:n.id,list:null,send_to:[{name:t.name,email:t.email,company:t.company,proposalLinks:i,startDate:d,salesManagerFirstName:m.first_name,salesManagerLastName:m.last_name,salesManagerEmail:m.email,signature:u,ccList:["saqib@iboothme.ae","ben@iboothme.app","shubhneet@iboothme.com","modar@iboothme.com","youssef@iboothme.ae"]}],send_on:new Date,user_id:r.id,status:"PENDING",created_at:new Date}),s.error?(await errorLogger("sendProposals()",s.error.message),{status:"ERROR",message:s.error.message,data:null}):(s=await a.from("inquiries").update({status:"SUBMITTED",activity:[...t.activity,{message:"<p class='mb-0'>Proposal(s) "+l+" submitted by "+r.first_name+"</p>",date_time:new Date}]}).eq("id",t.id),s.error?(await errorLogger("sendProposals()",s.error.message),{status:"ERROR",message:s.error.message,data:null}):{status:"OK",message:null,data:null})};export const addEvent=async e=>{const t=await createClient(),{data:a}=await getUser(),s=a,r=await t.from("events").select("*").eq("inquiry_id",e.id).maybeSingle();if(r.error)return await errorLogger("addEvent() - check existing",r.error.message),{status:"ERROR",message:r.error.message,data:null};const n={inquiry_id:e.id,event_name:e.eventName,name:e.name,company:e.company,email:e.email,contact:e.contact,start_datetime:e.start_datetime,end_datetime:e.end_datetime,scope_of_work:e.scope_of_work,event_comments:e.comments||null,location:e.location,location_comments:null,installation_datetime:null,removal_datetime:null,contact_person_name:null,contact_person_number:null,permits_needed:!1,branding_needed:!1,promoters:null,cancelled_reason:null,software_details:null,software_status:"PENDING",user_id:s.id,status:"ACTIVE",activity:[{message:"<p class='mb-0'>Event created by "+s.first_name+"</p>",date_time:new Date}],created_at:new Date};let o;return o=r.data?await t.from("events").update(n).eq("id",r.data.id).select():await t.from("events").insert(n).select(),o.error?(await errorLogger("addEvent()",o.error.message),{status:"ERROR",message:o.error.message,data:null}):{status:"OK",message:null,data:o.data}};export const editEventLogistics=async e=>{const t=await createClient();let a=await getUser();const s=a.data;return a=await t.from("events").update({event_name:e.eventName?e.eventName:null,start_datetime:e.startDateTime?e.startDateTime:null,end_datetime:e.endDateTime?e.endDateTime:null,location:e.location?e.location:null,location_comments:e.locationComments?e.locationComments:null,installation_datetime:e.installationDatetime?e.installationDatetime:null,removal_datetime:e.removalDateTime?e.removalDateTime:null,contact_person_name:e.contactPersonName?e.contactPersonName:null,contact_person_number:e.contactPersonNumber?e.contactPersonNumber:null,permits_needed:e.permitsNeeded,branding_needed:e.brandingNeeded,promoters:e.promoters?e.promoters:null,activity:[...e.activity,{message:"<p class='mb-0'>Event logistics edited by "+s.first_name+"</p>",date_time:new Date}]}).eq("id",e.id),a.error?(await errorLogger("editEventLogistics()",a.error.message),{status:"ERROR",message:a.error.message,data:null}):{status:"OK",message:null,data:null}};export const editEventName=async e=>{const t=await createClient();let a=await getUser();const s=a.data;return a=await t.from("events").update({event_name:e.eventName,activity:[...e.activity,{message:"<p class='mb-0'>Event name edited by "+s.first_name+"</p>",date_time:new Date}]}).eq("id",e.eventId),a.error?(await errorLogger("editEventName()",a.error.message),{status:"ERROR",message:a.error.message,data:null}):{status:"OK",message:null,data:null}};export const finishEvent=async e=>{const t=await createClient();let a=await getUser();const s=a.data;if(a=await getConfirmedProposals(e.inquiry_id),"ERROR"===a.status)return await errorLogger("finishEvent()",a.message),{status:"ERROR",message:a.error.message,data:null};const r=a.data;if(a=await t.from("clients").select("*").eq("email",e.inquiry.email.toLowerCase()),a.error)return await errorLogger("finishEvent()",a.error.message),{status:"ERROR",message:a.error.message,data:null};const n=a.data[0];let o=0;if(r.forEach((e=>{o+=e.total_amount})),a=await t.from("clients").update({total_events:n.total_events+1,total_spent:n.total_spent+o,last_event_datetime:e.start_datetime,list:"PROSPECTS"===n.list?"RETENTION":n.list}).eq("id",n.id),a.error)return await errorLogger("finishEvent()",a.error.message),{status:"ERROR",message:a.error.message,data:null};if(a=await getTemplate("FINISH-EMAIL"),"ERROR"===a.status)return{status:"ERROR",message:a.message,data:null};let i=a.data;if(a=await t.from("campaigns").insert({type:"AUTO",name:"IMS - Finish email #"+e.inquiry.id,template_id:i.id,list:null,send_to:[{name:e.inquiry.name,email:e.inquiry.email,company:e.inquiry.company,ccList:["saqib@iboothme.ae","ben@iboothme.app","shubhneet@iboothme.com","modar@iboothme.com","gerald@iboothme.ae","alex@iboothme.ae","rg@studio94.ae","youssef@iboothme.ae"]}],send_on:new Date,user_id:s.id,status:"PENDING",created_at:new Date}),a.error)return await errorLogger("finishEvent()",a.error.message),{status:"ERROR",message:a.error.message,data:null};if(a=await getTemplate("FEEDBACK-EMAIL"),"ERROR"===a.status)return{status:"ERROR",message:a.message,data:null};i=a.data;const l=new Date,m=new Date(l);return m.setDate(m.getDate()+2),a=await t.from("campaigns").insert({type:"AUTO",name:"IMS - Feedback email #"+e.inquiry.id,template_id:i.id,list:null,send_to:[{name:e.inquiry.name,email:e.inquiry.email,company:e.inquiry.company,ccList:["saqib@iboothme.ae","ben@iboothme.app","shubhneet@iboothme.com","modar@iboothme.com","youssef@iboothme.ae"]}],send_on:m,user_id:s.id,status:"PENDING",created_at:new Date}),a.error?(await errorLogger("finishEvent()",a.error.message),{status:"ERROR",message:a.error.message,data:null}):(a=await t.from("events").update({status:"FINISHED",activity:[...e.activity,{message:"<p class='mb-0'>Event marked as finished by "+s.first_name+"</p>",date_time:new Date}]}).eq("id",e.id),a.error?(await errorLogger("finishEvent()",a.error.message),{status:"ERROR",message:a.error.message,data:null}):(a=await addPayment(r,e),"ERROR"===a.status?(await errorLogger("addInvoice()",a.message),{status:"ERROR",message:a.error.message,data:null}):{status:"OK",message:null,data:null}))};export const cancelEvent=async e=>{const t=await createClient();let a=await getUser();const s=a.data;return a=await t.from("events").update({cancelled_reason:e.cancelled_reason,status:"CANCELLED",activity:[...e.activity,{message:"<p class='mb-0'>Event marked as cancelled by "+s.first_name+"</p>",date_time:new Date}]}).eq("id",e.id),a.error?(await errorLogger("cancelEvent()",a.error.message),{status:"ERROR",message:a.error.message,data:null}):{status:"OK",message:null,data:null}};export const restoreCancelEvent=async e=>{const t=await createClient();let a=await getUser();const s=a.data;return a=await t.from("events").update({cancelled_reason:null,status:"ACTIVE",activity:[...e.activity,{message:"<p class='mb-0'>Event marked as active by "+s.first_name+"</p>",date_time:new Date}]}).eq("id",e.id),a.error?(await errorLogger("restoreCancelEvent()",a.error.message),{status:"ERROR",message:a.error.message,data:null}):{status:"OK",message:null,data:null}};export const getEventsList=async()=>{const e=await createClient(),t=await e.from("events").select("event_name, company, start_datetime, end_datetime, software_status, name, email, contact, scope_of_work, created_at").eq("status","ACTIVE").order("start_datetime",{ascending:!0});return t.error?(await errorLogger("getEventsList()",t.error.message),{status:"ERROR",message:t.error.message,data:null}):{status:"OK",message:null,data:t.data}};export const getActiveEvents=async()=>{const e=await createClient();let t=await e.from("events").select("*, inquiry:inquiries(*), user:users(*)").eq("status","ACTIVE").order("start_datetime",{ascending:!0});if(t.error)return await errorLogger("getActiveEvents()",t.error.message),{status:"ERROR",message:t.error.message,data:null};let a=t.data;const s=a.map((e=>e.id)),r=await e.from("portal-events").select("*").in("event_id",s);if(r.error)return await errorLogger("portal-events batch fetch",r.error.message),{status:"ERROR",message:r.error.message,data:null};const n=r.data;for(const e of a)e.portal_events=n.filter((t=>t.event_id===e.id));return{status:"OK",message:null,data:a}};export const getFinishedEvents=async()=>{const e=await createClient();let t=await e.from("events").select("*, inquiry:inquiries(*), user:users(*)").eq("status","FINISHED").order("start_datetime",{ascending:!0});if(t.error)return await errorLogger("getFinishedEvents()",t.error.message),{status:"ERROR",message:t.error.message,data:null};let a=t.data;const s=a.map((e=>e.id)),r=await e.from("portal-events").select("*").in("event_id",s);if(r.error)return await errorLogger("portal-events batch fetch",r.error.message),{status:"ERROR",message:r.error.message,data:null};const n=r.data;for(const e of a)e.portal_events=n.filter((t=>t.event_id===e.id));return{status:"OK",message:null,data:a}};export const getCancelledEvents=async()=>{const e=await createClient();let t=await e.from("events").select("*, user:users(*)").eq("status","CANCELLED").order("start_datetime",{ascending:!0});if(t.error)return await errorLogger("getCancelledEvents()",t.error.message),{status:"ERROR",message:t.error.message,data:null};let a=t.data;const s=a.map((e=>e.id)),r=await e.from("portal-events").select("*").in("event_id",s);if(r.error)return await errorLogger("portal-events batch fetch",r.error.message),{status:"ERROR",message:r.error.message,data:null};const n=r.data;for(const e of a)e.portal_events=n.filter((t=>t.event_id===e.id));return{status:"OK",message:null,data:a}};export const sendReport=async e=>{const t=await createClient();let a=await getUser();const s=a.data;if(a=await getTemplate("REPORT-EMAIL"),"ERROR"===a.status)return{status:"ERROR",message:a.message,data:null};const r=a.data,n=e.portal_events.map((e=>e.event_code)),o=reportUrl+n[0]+"?ids="+n;a=await getSalesManager(e.inquiry.user_id);const i=a.data,l=signatures[i.first_name.toLowerCase()],m=e?.start_datetime?format(new Date(e?.start_datetime),"dd MMM yyyy"):"";return a=await t.from("campaigns").insert({type:"AUTO",name:"IMS - Report email #"+e.id,template_id:r.id,list:null,send_to:[{name:e.name,email:e.email,company:e.company,reportLink:o,startDate:m,salesManagerFirstName:i.first_name,salesManagerLastName:i.last_name,salesManagerEmail:i.email,signature:l,ccList:["saqib@iboothme.ae","ben@iboothme.app","shubhneet@iboothme.com","modar@iboothme.com","gerald@iboothme.ae","alex@iboothme.ae","rg@studio94.ae","youssef@iboothme.ae"]}],send_on:new Date,user_id:s.id,status:"PENDING",created_at:new Date}),a.error?(await errorLogger("sendReport()",a.error.message),{status:"ERROR",message:a.error.message,data:null}):{status:"OK",message:null,data:null}};export const addPayment=async(e,t)=>{const a=await createClient(),s=await a.from("payments").select("*").eq("inquiry_id",t.inquiry_id).maybeSingle();if(s.error)return await errorLogger("addPayment() - check existing",s.error.message),{status:"ERROR",message:s.error.message,data:null};const r={event_id:t.id,inquiry_id:t.inquiry_id,proposals:e,accountant_name:null,accountant_email:null,status:"PENDING",activity:[{message:"<p class='mb-0'>Payment created by IMS</p>",date_time:new Date}],created_at:new Date};let n;return n=s.data?await a.from("payments").update(r).eq("id",s.data.id):await a.from("payments").insert(r),n.error?(await errorLogger("addPayment()",n.error.message),{status:"ERROR",message:n.error.message,data:null}):{status:"OK",message:null,data:n.data}};export const getUnpaidPayments=async()=>{const e=await createClient(),t=await e.from("payments").select("*, event:events(*), inquiry:inquiries(*, user:users(*))").eq("status","UNPAID").order("created_at",{ascending:!1});return t.error?(await errorLogger("getUnpaidPayments()",t.error.message),{status:"ERROR",message:t.error.message,data:null}):{status:"OK",message:null,data:t.data}};export const getClearedPayments=async()=>{const e=await createClient(),t=await e.from("payments").select("*, event:events(*), inquiry:inquiries(*, user:users(*))").eq("status","CLEARED").order("created_at",{ascending:!1});return t.error?(await errorLogger("getClearedPayments()",t.error.message),{status:"ERROR",message:t.error.message,data:null}):{status:"OK",message:null,data:t.data}};export const getPendingInvoices=async()=>{const e=await createClient(),t=await e.from("payments").select("*, event:events(*), inquiry:inquiries(*, user:users(*))").eq("status","PENDING").order("created_at",{ascending:!1});return t.error?(await errorLogger("getPendingPayments()",t.error.message),{status:"ERROR",message:t.error.message,data:null}):{status:"OK",message:null,data:t.data}};export const getInvoices=async e=>{const t=await createClient(),a=await t.from("invoices").select("*").eq("payment_id",e).order("created_at",{ascending:!1});return a.error?(await errorLogger("getInvoices()",a.error.message),{status:"ERROR",message:a.error.message,data:null}):{status:"OK",message:null,data:a.data}};export const editAccountantDetails=async e=>{const t=await createClient();let a=await getUser();const s=a.data;return a=await t.from("payments").update({accountant_name:e.accountantName,accountant_email:e.accountantEmail,activity:[...e.activity,{message:"<p class='mb-0'>Accountant details edited by "+s.first_name+"</p>",date_time:new Date}]}).eq("id",e.paymentId),a.error?(await errorLogger("editEventName()",a.error.message),{status:"ERROR",message:a.error.message,data:null}):{status:"OK",message:null,data:null}};export const uploadInvoice=async(e,t)=>{const a=await createClient();let s=await getUser();const r=s.data,n=getFileExtension(e.file),o=e.number+"."+n;if(s=await a.storage.from("ibm").upload("invoices/"+o,e.file,{upsert:!0}),s.error)return await errorLogger("uploadInvoice()",s.error.message),{status:"ERROR",message:s.error.message,data:null};const i=invoicesUrl+s.data.fullPath;return s=await a.from("invoices").insert({number:e.number,url:i,payment_id:t.id,created_at:new Date}),s.error?(await errorLogger("uploadInvoice()",s.error.message),{status:"ERROR",message:s.error.message,data:null}):(s=await a.from("payments").update({activity:[...t.activity,{message:"<p class='mb-0'>Invoice <a class='fw-semibold' href='"+i+"' target='_blank'>#"+e.number+"</a> uploaded by "+r.first_name+"</p>",date_time:new Date}]}).eq("id",t.id),s.error?(await errorLogger("uploadInvoice()",s.error.message),{status:"ERROR",message:s.error.message,data:null}):{status:"OK",message:null,data:null})};export const sendInvoices=async(e,t)=>{const a=await createClient();let s=await getUser();const r=s.data;if(s=await getTemplate("INVOICE-EMAIL"),"ERROR"===s.status)return{status:"ERROR",message:s.message,data:null};let n=s.data,o="",i=[],l="";e.forEach(((t,a)=>{i.push(t.url),o+=t.number;const s="<a class='fw-semibold' href='"+t.url+"' target='_blank'>#"+t.number+"</a>";l+=s,a<e.length-1&&(o+=", ",l+=", ")}));let m=["saqib@iboothme.ae","ben@iboothme.app","shubhneet@iboothme.com","modar@iboothme.com","rg@studio94.ae","youssef@iboothme.ae"];t.accountant_email&&m.push(t.inquiry.email);const u=t.inquiry?.start_datetime?format(new Date(t.inquiry?.start_datetime),"dd MMM yyyy"):"";return s=await a.from("campaigns").insert({type:"AUTO",name:"IMS - Invoice(s) email #"+o,template_id:n.id,list:null,send_to:[{name:t.accountant_name?t.accountant_name:t.inquiry.name,email:t.accountant_email?t.accountant_email:t.inquiry.email,company:t.inquiry.company,invoiceLinks:i,startDate:u,ccList:m}],send_on:new Date,user_id:r.id,status:"PENDING",created_at:new Date}),s.error?(await errorLogger("sendInvoices()",s.error.message),{status:"ERROR",message:s.error.message,data:null}):(s=await a.from("payments").update({status:"UNPAID",activity:[...t.activity,{message:"<p class='mb-0'>Invoice(s) "+l+" sent by "+r.first_name+"</p>",date_time:new Date}]}).eq("id",t.id),s.error?(await errorLogger("sendInvoices()",s.error.message),{status:"ERROR",message:s.error.message,data:null}):{status:"OK",message:null,data:null})};export const clearPayment=async e=>{const t=await createClient();let a=await getUser();const s=a.data;return a=await t.from("payments").update({status:"CLEARED",activity:[...e.activity,{message:"<p class='mb-0'>Payment marked as cleared by "+s.first_name+"</p>",date_time:new Date}]}).eq("id",e.id),a.error?(await errorLogger("clearPayment()",a.error.message),{status:"ERROR",message:a.error.message,data:null}):{status:"OK",message:null,data:null}};export const getSoftwaresDetails=async()=>{const e=await createClient();let t=await e.from("events").select("*, user:users(*)").order("start_datetime",{ascending:!0});if(t.error)return await errorLogger("getSoftwaresDetails()",t.error.message),{status:"ERROR",message:t.error.message,data:null};let a=t.data;const s=a.map((e=>e.id)),r=await e.from("portal-events").select("*").in("event_id",s);if(r.error)return await errorLogger("portal-events batch fetch",r.error.message),{status:"ERROR",message:r.error.message,data:null};const n=r.data;for(const e of a)e.portal_events=n.filter((t=>t.event_id===e.id));return{status:"OK",message:null,data:a}};export const getArchivedSoftwares=async()=>{const e=await createClient();let t=await e.from("events").select("*, user:users(*)").eq("software_status","ARCHIVED").order("start_datetime",{ascending:!0});if(t.error)return await errorLogger("getArchivedSoftwares()",t.error.message),{status:"ERROR",message:t.error.message,data:null};let a=t.data;const s=a.map((e=>e.id)),r=await e.from("portal-events").select("*").in("event_id",s);if(r.error)return await errorLogger("portal-events batch fetch",r.error.message),{status:"ERROR",message:r.error.message,data:null};const n=r.data;for(const e of a)e.portal_events=n.filter((t=>t.event_id===e.id));return{status:"OK",message:null,data:a}};export const updateSoftwareStatus=async e=>{const t=await createClient();let a=await getUser();const s=a.data;return a=await t.from("events").update({software_status:e.softwareStatus,activity:[...e.activity,{message:"<p class='mb-0'>Software status updated by "+s.first_name+"</p>",date_time:new Date}]}).eq("id",e.id),a.error?(await errorLogger("updateSoftwareStatus()",a.error.message),{status:"ERROR",message:a.error.message,data:null}):{status:"OK",message:null,data:null}};export const getEventCodes=async e=>{const t=await createClient(),a=await t.from("portal-events").select("*").eq("event_id",e).order("event_code",{ascending:!0});return a.error?(await errorLogger("getEventCodes()",a.error.message),{status:"ERROR",message:a.error.message,data:null}):{status:"OK",message:null,data:a.data}};export const getLastEventCode=async()=>{const e=await createClient(),t=await e.from("portal-events").select("*").order("event_code",{ascending:!0});return t.error?(await errorLogger("getEventCodes()",t.error.message),{status:"ERROR",message:t.error.message,data:null}):{status:"OK",message:null,data:t.data}};export const addPortalEvent=async e=>{const t=await createClient();let a=await getUser();const s=a.data;return a=await t.from("portal-events").insert({event_code:Number(e.eventCode),event_id:e.id,solution:e.solution,link:e.path,user_id:s.id,created_at:new Date}),a.error?(await errorLogger("addPortalEvent()",a.error.message),{status:"ERROR",message:a.error.message,data:null}):{status:"OK",message:null,data:null}};export const editSoftwareDetails=async e=>{const t=await createClient();let a=await getUser();const s=a.data;return a=await t.from("events").update({software_details:e.softwareDetails,activity:[...e.activity,{message:"<p class='mb-0'>Software details edited by "+s.first_name+"</p>",date_time:new Date}]}).eq("id",e.eventId),a.error?(await errorLogger("editSoftwareDetails()",a.error.message),{status:"ERROR",message:a.error.message,data:null}):{status:"OK",message:null,data:null}};export const getTemplates=async()=>{const e=await createClient(),t=await e.from("templates").select("*, user:users(*)").eq("status","ACTIVE").order("created_at",{ascending:!1});return t.error?(await errorLogger("getTemplates()",t.error.message),{status:"ERROR",message:t.error.message,data:null}):{status:"OK",message:null,data:t.data}};export const getTemplate=async e=>{const t=await createClient(),a=await t.from("templates").select("*, user:users(*)").eq("key",e.toLowerCase());return a.error?(await errorLogger("getTemplate()",a.error.message),{status:"ERROR",message:a.error.message,data:null}):a.data.length>0?{status:"OK",message:null,data:a.data[0]}:{status:"ERROR",message:"Unable to get template",data:null}};export const addTemplate=async e=>{const t=await createClient();let a=await t.from("templates").select("*").eq("key",e.key.toLowerCase());if(a.error)return{status:"ERROR",message:a.error.message,data:null};if(a.data.length>0)return{status:"EXISTS",message:null,data:null};a=await getUser();const s=a.data;return a=await t.from("templates").insert({key:e.key.toLowerCase(),type:"USER",name:e.name,sender_name:e.senderName,from_email:e.fromEmail.toLowerCase(),subject:e.subject,content:e.content,user_id:s.id,status:"ACTIVE",created_at:new Date}),a.error?(await errorLogger("addTemplate()",a.error.message),{status:"ERROR",message:a.error.message,data:null}):{status:"OK",message:null,data:null}};export const editTemplate=async e=>{const t=await createClient(),a=await t.from("templates").update({name:e.name,sender_name:e.senderName,from_email:e.fromEmail.toLowerCase(),subject:e.subject,content:e.content}).eq("key",e.key.toLowerCase());return a.error?(await errorLogger("editTemplate()",a.error.message),{status:"ERROR",message:a.error.message,data:null}):{status:"OK",message:null,data:null}};export const deleteTemplate=async e=>{const t=await createClient(),a=await t.from("templates").update({status:"INACTIVE"}).eq("key",e.key);return a.error?(await errorLogger("deleteTemplate()",a.error.message),{status:"ERROR",message:a.error.message,data:null}):{status:"OK",message:null,data:null}};export const getCampaigns=async()=>{const e=await createClient(),t=await e.from("campaigns").select("*, template:templates(*), user:users(*)").eq("type","USER").order("created_at",{ascending:!1}).limit(50);return t.error?(await errorLogger("getCampaigns()",t.error.message),{status:"ERROR",message:t.error.message,data:null}):{status:"OK",message:null,data:t.data}};export const getCampaign=async e=>{const t=await createClient(),a=await t.from("campaigns").select("*, template:templates(*), user:users(*)").eq("id",e);return a.error?(await errorLogger("getCampaign()",a.error.message),{status:"ERROR",message:a.error.message,data:null}):a.data.length>0?{status:"OK",message:null,data:a.data[0]}:{status:"ERROR",message:"Unable to get campaign",data:null}};export const addUserCampaign=async e=>{const t=await createClient();let a=await t.from("campaigns").select("*").eq("name",e.name.toLowerCase());if(a.error)return await errorLogger("addUserCampaign()",a.error.message),{status:"ERROR",message:a.error.message,data:null};if(a.data.length>0)return{status:"EXISTS",message:null,data:null};a=await getUser();const s=a.data;return a=await t.from("campaigns").insert({type:"USER",name:e.name.toLowerCase(),template_id:e.templateId,list:e.list,send_to:null,send_on:e.sendOn,user_id:s.id,status:"PENDING",created_at:new Date}),a.error?(await errorLogger("addUserCampaign()",a.error.message),{status:"ERROR",message:a.error.message,data:null}):{status:"OK",message:null,data:null}};export const updateUserCampaign=async e=>{const t=await createClient();let a=await t.from("campaigns").update({status:"SENDING"}).eq("id",e.id);return a.error?(await errorLogger("updateUserCampaign()",a.error.message),{status:"ERROR",message:a.error.message,data:null}):{status:"OK",message:null,data:null}};export const updateCampaign=async e=>{const t=await createClient();let a=await t.from("campaigns").update({status:"COMPLETED"}).eq("id",e.id);if(a.error)return await errorLogger("updateCampaign()",a.error.message),{status:"ERROR",message:a.error.message,data:null};if(e.name.toLowerCase().includes("birthday email")){const s=e.name.lastIndexOf(" "),r=e.name.substring(s+1);r&&(a=await t.from("clients").update({last_wished_datetime:new Date}).eq("email",r))}if(e.name.toLowerCase().includes("follow up")){const s=e.name.lastIndexOf(" "),r=e.name.substring(s+1);if(r){if(a=await t.from("inquiries").select("*").eq("id",r),a.error)return await errorLogger("updateCampaign()",a.error.message),{status:"ERROR",message:a.error.message,data:null};const s=a.data[0];let n=s.follow_ups.data,o=n.find((t=>t.template.toLowerCase()===e.template.key));if(o&&(o.status="SENT",a=await t.from("inquiries").update({follow_ups:{data:n,status:s.follow_ups.status},activity:[...s.activity,{message:"<p class='mb-0'>"+o.type+" email sent</p>",date_time:new Date}]}).eq("id",r),a.error))return await errorLogger("updateCampaign()",a.error.message),{status:"ERROR",message:a.error.message,data:null}}}return{status:"OK",message:null,data:null}};export const archiveCampaign=async e=>{const t=await createClient(),a=await t.from("campaigns").update({status:"ARCHIVED"}).eq("id",e.id);return a.error?(await errorLogger("archiveCampaign()",a.error.message),{status:"ERROR",message:a.error.message,data:null}):{status:"OK",message:null,data:null}};export const getCampaignReports=async()=>{const e=await createClient();let t=await e.from("campaigns").select("*, user:users(*)").eq("type","USER").order("send_on",{ascending:!1}).limit(20);if(t.error)return await errorLogger("getCampaignReports()",t.error.message),{status:"ERROR",message:t.error.message,data:null};let a=t.data;if(t=await e.from("campaign-reports").select("*").in("campaign_id",a.map((e=>e.id))),t.error)return await errorLogger("getCampaignReports()",t.error.message),{status:"ERROR",message:t.error.message,data:null};let s=t.data;return{status:"OK",message:null,data:a.map((e=>{let t=[],a=[],r=[],n=[];const o=s.filter((t=>t.campaign_id===e.id)),i=[...new Set(o.map((e=>e.email)))];return o.forEach((e=>{if("send"!==e.event||t.includes(e.email)||t.push(e.email),"open"!==e.event||a.includes(e.email)||a.push(e.email),"click"===e.event){r.find((t=>t.email===e.email&&t.clickUrl===e.click_url))||r.push({email:e.email,clickUrl:e.click_url})}("hard_bounce"===e.event||"soft_bounce"===e.event&&!n.includes(e.email))&&n.push(e.email)})),{...e,sent:i.length,opens:a.length,clicks:r.length,hard_Bounces:n.length}}))}};export const getCampaignReport=async e=>{const t=await createClient();let a=await t.from("campaigns").select("*").eq("id",e);if(a.error)return await errorLogger("getCampaignReport()",a.error.message),{status:"ERROR",message:a.error.message,data:null};if(a.data.length>0){const e=a.data[0];if(a=await t.from("campaign-reports").select("*").eq("campaign_id",e.id),a.error)return await errorLogger("getCampaignReport()",a.error.message),{status:"ERROR",message:a.error.message,data:null};const s=a.data,r=["send","delivered","open","click","reject","soft_bounce","hard_bounce"];let n={},o=0,i=0,l=0,m=0,u=0,d=[],c=[],g=[],p=[],w=[];s.forEach((e=>{const{event:t,email:a,click_url:s}=e;n[a]||(n[a]={events:[],tags:[]}),n[a].tags.includes(t)||n[a].tags.push(t);n[a].events.find((e=>e.event===t&&("click"!==t||e.clickUrl===s)))||("delivered"!==t&&"open"!==t||(o++,d.push(a)),"open"===t&&(i++,c.push(a)),"click"===t&&(l++,g.push(a)),"reject"===t&&(m++,p.push(a)),"hard_bounce"!==t&&"soft_bounce"!==t||(u++,w.push(a)),n[a].events.push({event:t,clickUrl:s}))})),Object.values(n).forEach((e=>{e.tags.sort(((e,t)=>r.indexOf(e)-r.indexOf(t)))}));let R=Object.keys(n).length;return{status:"OK",message:null,data:{...e,sent:R,delivered:o,opens:i,clicks:l,rejected:m,bounced:u,events:n,deliveredEmails:d,opensEmails:c,clicksEmails:g,rejectedEmails:p,bouncedEmails:w}}}return{status:"ERROR",message:"Campaign does not exist.",data:null}};export const getClient=async e=>{const t=await createClient(),a=await t.from("clients").select("*").eq("id",e);return a.error?(await errorLogger("getClient()",a.error.message),{status:"ERROR",message:a.error.message,data:null}):a.data.length>0?{status:"OK",message:null,data:a.data[0]}:{status:"ERROR",message:"Unable to get client",data:null}};export const getClients=async()=>{const e=await createClient(),t=await e.from("clients").select("*, user:users(*)").neq("list","DELETED").order("name",{ascending:!1});return t.error?(await errorLogger("getClients()",t.error.message),{status:"ERROR",message:t.error.message,data:null}):{status:"OK",message:null,data:t.data}};export const addClients=async e=>{try{const t=await createClient();let a=await getUser();const s=a.data,r=new Date,n=e.map((e=>({...e,user_id:s.id,created_at:r})));return a=await t.from("clients").upsert(n,{onConflict:["email"]}),a.error?(await errorLogger("addClients()",a.error.message),{status:"ERROR",message:a.error.message,data:null}):{status:"OK",message:null,data:null}}catch(e){return await errorLogger("addClients()",e),{status:"ERROR",message:null,data:null}}};export const addClient=async(e,t)=>{const a=await createClient();let s=await a.from("clients").select("*").eq("email",e.email.toLowerCase());if(s.error)return await errorLogger("addClient()",s.error.message),{status:"ERROR",message:s.error.message,data:null};if(s.data.length>0){const e=s.data[0];return"inquiry"===t&&await a.from("clients").update({total_inquiries:e.total_inquiries+1}).eq("id",e.id),{status:"EXISTS",message:null,data:null}}s=await getUser();const r=s.data;return s=await a.from("clients").insert({name:e.name?e.name:null,company:e.company?e.company:null,country:e.country?e.country:null,email:e.email.toLowerCase(),contact:e.contact?e.contact:null,source:e.source?e.source:null,fish:e.fish?e.fish:null,website:e.website?e.website.toLowerCase():null,date_of_birth:e.dateOfBirth?e.dateOfBirth:null,total_inquiries:"inquiry"===t?1:null,list:e.list,subscribed:e.subscribed,user_id:r.id,created_at:new Date}),s.error?(await errorLogger("addClient()",s.error.message),{status:"ERROR",message:s.error.message,data:null}):{status:"OK",message:null,data:null}};export const editClient=async e=>{const t=await createClient(),a=await t.from("clients").update({name:e.name?e.name:null,company:e.company?e.company:null,country:e.country?e.country:null,email:e.email.toLowerCase(),contact:e.contact?e.contact:null,source:e.source?e.source:null,fish:e.fish?e.fish:null,website:e.website?e.website:null,date_of_birth:e.dateOfBirth?e.dateOfBirth:null,list:e.list,subscribed:e.subscribed}).eq("id",e.id);return a.error?(await errorLogger("editClient()",a.error.message),{status:"ERROR",message:a.error.message,data:null}):{status:"OK",message:null,data:null}};export const deleteClient=async e=>{const t=await createClient(),a=await t.from("clients").update({list:"DELETED"}).eq("id",e.id);return a.error?(await errorLogger("deleteClient()",a.error.message),{status:"ERROR",message:a.error.message,data:null}):{status:"OK",message:null,data:null}};export const unsubscribeClient=async e=>{const t=await createClient(),a=await t.from("clients").update({subscribed:!1}).eq("id",e);return a.error?(await errorLogger("unsubscribeClient()",a.error.message),{status:"ERROR",message:a.error.message,data:null}):{status:"OK",message:null,data:null}};export const getCompanies=async()=>{const e=await createClient(),t=await e.from("clients").select("company");if(t.error)return await errorLogger("getCompanies()",t.error.message),{status:"ERROR",message:t.error.message,data:null};let a=[];return t.data.forEach((e=>{if(e.company){let t=e.company.toLowerCase();a.find((e=>e===t))||a.push(t)}})),{status:"OK",message:null,data:a}};export const getLists=async()=>{const e=await createClient(),t=await e.from("clients").select("list");if(t.error)return await errorLogger("getLists()",t.error.message),{status:"ERROR",message:t.error.message,data:null};let a=[];return t.data.forEach((e=>{if("DELETED"===e.list)return;let t=a.find((t=>t.name===e.list));t?t.size++:a.push({name:e.list,size:1})})),{status:"OK",message:null,data:a}};export const getClientsByList=async e=>{const t=await createClient(),a=await t.from("clients").select("*").in("list",e);return a.error?(await errorLogger("getClientsByList()",a.error.message),{status:"ERROR",message:a.error.message,data:null}):{status:"OK",message:null,data:a.data}};export const getCounts=async()=>{const e=await createClient();let t={},a={},s={},r={},n=await e.from("inquiries").select("*");if(n.error)return await errorLogger("getCounts()",n.error.message),{status:"ERROR",message:n.error.message,data:null};if(n.data.forEach((e=>{const a=e.status.toLowerCase();t[a]?t[a]++:t[a]=1})),n=await e.from("events").select("*"),n.error)return await errorLogger("getCounts()",n.error.message),{status:"ERROR",message:n.error.message,data:null};if(n.data.forEach((e=>{const t=e.status.toLowerCase();a[t]?a[t]++:a[t]=1})),n.data.forEach((e=>{const t=e.software_status.toLowerCase();s[t]?s[t]++:s[t]=1})),n=await e.from("payments").select("*"),n.error)return await errorLogger("getCounts()",n.error.message),{status:"ERROR",message:n.error.message,data:null};n.data.forEach((e=>{const t=e.status.toLowerCase();r[t]?r[t]++:r[t]=1}));return{status:"OK",message:null,data:{inquiryCounts:t,eventCounts:a,softwareCounts:s,paymentCounts:r}}};export const scheduleFollowupEmails=async e=>{const t=await createClient();let a=await t.from("inquiries").select("*").eq("id",e);if(a.error)return await errorLogger("scheduleFollowupEmails()",a.error.message),{status:"ERROR",message:a.error.message,data:null};const s=a.data[0],r=s.follow_ups;if("SCHEDULED"===r.status)return{status:"OK",message:"Follow up emails already added",data:null};if("SKIPPED"===r.status)return{status:"OK",message:"Follow up emails skipped",data:null};if("CANCELLED"===r.status)return{status:"OK",message:"Follow up emails cancelled",data:null};const n=new Date,o=new Date(s.start_datetime),i=differenceInDays(o,n);let l=[];if(i<=2)l=[];else if(i<=3){const e=addDays(n,1);isBefore(e,o)&&l.push({type:"Follow up 3",date:e,template:"FOLLOWUP-3-EMAIL",status:"PENDING"})}else if(i<=7){const e=addDays(n,2);isBefore(e,o)&&l.push({type:"Follow up 3",date:e,template:"FOLLOWUP-3-EMAIL",status:"PENDING"})}else if(i<=14){const e=addDays(n,2);isBefore(e,o)&&l.push({type:"Follow up 2",date:e,template:"FOLLOWUP-2-EMAIL",status:"PENDING"});const t=addDays(o,-5);isBefore(t,o)&&l.push({type:"Follow up 3",date:t,template:"FOLLOWUP-3-EMAIL",status:"PENDING"})}else{const e=addDays(n,2);isBefore(e,o)&&l.push({type:"Follow up 1",date:e,template:"FOLLOWUP-1-EMAIL",status:"PENDING"});const t=Math.floor(i/2),a=addDays(n,t);isBefore(a,o)&&l.push({type:"Follow up 2",date:a,template:"FOLLOWUP-2-EMAIL",status:"PENDING"});const s=addDays(o,-5);isBefore(n,s)&&isBefore(s,o)&&l.push({type:"Follow up 3",date:s,template:"FOLLOWUP-3-EMAIL",status:"PENDING"})}a=await getSalesManager(s.user_id);const m=a.data;let u=[];for(const e of l){let a=await getTemplate(e.template);const r=a.data,n=signatures[m.first_name.toLowerCase()];let o=["saqib@iboothme.ae","ben@iboothme.app","shubhneet@iboothme.com","modar@iboothme.com","youssef@iboothme.ae"];"shubhneet@iboothme.com"===m.email?o=o.filter((e=>"saqib@iboothme.ae"!==e&&"ben@iboothme.app"!==e)):"saqib@iboothme.ae"===m.email?o=o.filter((e=>"ben@iboothme.app"!==e&&"shubhneet@iboothme.com"!==e)):"ben@iboothme.app"===m.email?o=o.filter((e=>"saqib@iboothme.ae"!==e&&"shubhneet@iboothme.com"!==e)):"youssef@iboothme.ae"===m.email&&(o=o.filter((e=>"saqib@iboothme.ae"!==e&&"ben@iboothme.app"!==e)));const i=s?.start_datetime?format(new Date(s?.start_datetime),"dd MMM yyyy"):"";a=await t.from("campaigns").insert({type:"AUTO",name:"IMS - "+e.type+" "+s.id,template_id:r.id,list:null,send_to:[{name:s.name,email:s.email,company:s.company,startDate:i,salesManagerFirstName:m.first_name,salesManagerLastName:m.last_name,salesManagerEmail:m.email,signature:n,ccList:o}],send_on:e.date,user_id:s.user_id,status:"PENDING",created_at:new Date}),u.push({message:"<p class='mb-0'>"+e.type+" email scheduled for "+format(new Date(e.date),"dd MMM yyyy h:mm a")+"</p>",date_time:new Date})}return 0===l.length&&u.push({message:"<p class='mb-0'>Follow up emails skipped</p>",date_time:new Date}),a=await t.from("inquiries").update({follow_ups:{data:l,status:0===l.length?"SKIPPED":"SCHEDULED"},activity:[...s.activity,...u]}).eq("id",s.id),a.error?(await errorLogger("scheduleFollowupEmails()",a.error.message),{status:"ERROR",message:a.error.message,data:null}):{status:"OK",message:"Follow up emails added",data:null}};export const cancelFollowups=async e=>{const t=await createClient();let a=await getUser();const s=a.data;if(a=await t.from("inquiries").select("*").eq("id",e),a.error)return await errorLogger("cancelFollowups()",a.error.message),{status:"ERROR",message:a.error.message,data:null};const r=a.data[0];if(a=await t.from("campaigns").select("*, template:templates(*)").eq("status","PENDING").eq("type","AUTO"),a.error)return await errorLogger("cancelFollowups()",a.error.message),{status:"ERROR",message:a.error.message,data:null};const n=a.data;for(const e of n)if(e.name.toLowerCase().includes("follow up")){const s=e.name.lastIndexOf(" ");if(e.name.substring(s+1)===r.id&&(a=await t.from("campaigns").update({status:"CANCELLED"}).eq("id",e.id),a.error))return await errorLogger("cancelFollowups()",a.error.message),{status:"ERROR",message:a.error.message,data:null}}let o=r.follow_ups.data;o.forEach((e=>{"PENDING"===e.status&&(e.status="CANCELLED")}));let i="<p class='mb-0'>Follow up emails cancelled by "+s.first_name+"</p>";return"CONFIRMED"!==r.status&&"LOST"!==r.status||(i="<p class='mb-0'>Follow up emails cancelled by IMS</p>"),a=await t.from("inquiries").update({follow_ups:{data:o,status:"CANCELLED"},activity:[...r.activity,{message:i,date_time:new Date}]}).eq("id",r.id),a.error?(await errorLogger("cancelFollowups()",a.error.message),{status:"ERROR",message:a.error.message,data:null}):{status:"OK",message:null,data:null}};export const sendEmail=async e=>{try{return await mandrill.messages.send({message:{subject:e.subject,html:e.html,from_email:e.from_email,from_name:e.from_name,to:e.to,track_opens:!0,track_clicks:!0,metadata:{campaignId:e.campaignId}}})}catch(e){await errorLogger("sendEmail()",e.message)}};export const handleMandrillWebhook=async e=>{const t=await createClient();for(const a of e){const e=a.msg,s=e.metadata?e.metadata.campaignId:null,r=a._id;if(s){const n=a.event,o=e.email;let i=null;if("click"===n&&(i=a.url),"hard_bounce"===n||"soft_bounce"===n)try{const{data:e}=await t.from("clients").select("id").eq("email",o).limit(1),a=e?.[0];a&&await t.from("clients").update({list:"DELETED"}).eq("id",a.id)}catch(e){}return t.from("campaign-reports").insert({campaign_id:s,email:o,event:n,click_url:i,mandrill_id:r,created_at:new Date})}}};export const getCronCampaigns=async()=>{const e=new Date,t=e.getHours();if(t<5||t>=15)return{status:"OK",message:"Dubai allowed time window (9 AM - 7 PM) - current time is "+t+":00",data:[]};const a=await createClient(),s=await a.from("campaigns").select("*, template:templates(*), user:users(*)").eq("status","PENDING").lte("send_on",e.toISOString()).order("created_at",{ascending:!0});return s.error?(await errorLogger("getCronCampaigns()",s.error.message),{status:"ERROR",message:s.error.message,data:null}):{status:"OK",message:null,data:s.data}};export const getBirthdayClients=async()=>{const e=await createClient(),t=await e.from("clients").select("*").neq("list","DELETED").order("name",{ascending:!1});if(t.error)return await errorLogger("getClients()",t.error.message),{status:"ERROR",message:t.error.message,data:null};const a=t.data,s=new Date,r=s.getUTCMonth()+1,n=s.getUTCDate();return{status:"OK",message:null,data:a.filter((e=>{if(e.date_of_birth){const t=new Date(e.date_of_birth),a=t.getUTCMonth()+1,s=t.getUTCDate();return console.log("currentMonthUTC: "+r),console.log("currentDayUTC: "+n),console.log("***"),console.log(t.toUTCString()),console.log("birthMonthUTC: "+a),console.log("birthDayUTC: "+s),a===r&&s===n}}))}};export const addBirthdayCampaign=async e=>{const t=await createClient();let a=await getTemplate("BIRTHDAY-EMAIL");if("ERROR"===a.status)return{status:"ERROR",message:a.message,data:null};const s=a.data;if(a=await t.from("campaigns").insert({type:"AUTO",name:"IMS - Birthday email "+e.email,template_id:s.id,list:null,send_to:[{name:e.name,email:e.email,ccList:["ben@iboothme.app","shubhneet@iboothme.com","youssef@iboothme.ae"]}],send_on:new Date,user_id:"74330a24-7628-4e0b-83b1-4da3ae7af35d",status:"PENDING",created_at:new Date}),a.error)return await errorLogger("addBirthdayCampaign()",a.error.message),{status:"ERROR",message:a.error.message,data:null};const r=await t.from("clients").update({last_wished_datetime:(new Date).toISOString()}).eq("id",e.id);return r.error?(await errorLogger("Updating last_wished_datetime",r.error.message),{status:"ERROR",message:r.error.message,data:null}):{status:"OK",message:null,data:null}};export const errorLogger=async(e,t)=>{const a=await createClient(),s=(await getUser()).data;await a.from("error-log").insert({caller:e,message:t,user_id:s.id,created_at:new Date})};export const getConfirmedInquiriesWithProposal=async e=>{let t=(await createClient()).from("inquiries").select("\n      user_id,\n      created_at,\n      start_datetime,\n      company,\n      email,\n      proposals (\n        subtotal_amount,\n        vat_amount,\n        total_amount,\n        confirmed\n      ),\n      events (\n        status\n      )\n    ").eq("status","CONFIRMED").order("start_datetime",{ascending:!0});e&&(t=t.eq("user_id",e));const a=await t;if(a.error)return await errorLogger("getConfirmedInquiriesWithProposal()",a.error.message),{status:"ERROR",message:a.error.message,data:null};const s=a.data.filter((e=>Array.isArray(e.proposals)&&e.proposals.some((e=>!0===e.confirmed))&&Array.isArray(e.events)&&e.events.some((e=>"FINISHED"===e.status)))).map((e=>({...e,proposals:e.proposals.filter((e=>!0===e.confirmed))}))),r=new Date,n=r.getMonth(),o=r.getFullYear(),i=new Date("2024-07-01");let l=0,m=0;return s.forEach((e=>{const t=new Date(e.start_datetime);e.proposals.forEach((e=>{const a=e.total_amount||0;t.getMonth()===n&&t.getFullYear()===o&&(l+=a),t>=i&&t<=r&&(m+=a)}))})),{status:"OK",message:null,data:s,currentMonthSales:l,currentYearSales:m}};export const getInactiveClients=async()=>{const e=await createClient(),t=new Date;t.setMonth(t.getMonth()-6);const a=await e.from("clients").select("id, name, email, last_event_datetime").lt("last_event_datetime",t.toISOString());return a.error?(await errorLogger("getInactiveClients()",a.error.message),{status:"ERROR",message:a.error.message,data:null}):{status:"OK",message:null,data:a.data}};export const getLeadsWithoutSaleCount=async()=>{const e=await createClient(),t=await e.from("leads").select("id",{count:"exact",head:!0}).is("sale",null).neq("status","DELETED");return t.error?(await errorLogger("getLeadsWithoutSaleCount()",t.error.message),{status:"ERROR",message:t.error.message,count:0}):{status:"OK",message:null,count:t.count}};export const getMonthlySalesData=async()=>{const e=await createClient(),t=new Date("2024-07-01"),a=new Date,s=await e.from("events").select("created_at, inquiry:inquiries(id), status").gte("created_at",t.toISOString()).lte("created_at",a.toISOString()).eq("status","ACTIVE");if(s.error)return console.error(s.error),{status:"ERROR",message:s.error.message};const r=s.data,n={},o=new Date(t);for(;o<=a;){const e=o.toLocaleString("default",{month:"long",year:"numeric"});n[e]=0,o.setMonth(o.getMonth()+1)}const i=r.map((e=>e.inquiry.id)),l=await e.from("proposals").select("*").in("inquiry_id",i).eq("confirmed",!0);if(l.error)return{status:"ERROR",message:l.error.message};const m=l.data;for(const e of r){const t=new Date(e.created_at).toLocaleString("default",{month:"long",year:"numeric"}),a=m.filter((t=>t.inquiry_id===e.inquiry.id)).reduce(((e,t)=>e+t.total_amount),0);n[t]||(n[t]=0),n[t]+=a}const u=await e.from("targets").select("month, year, target_amount");if(u.error)return{status:"ERROR",message:u.error.message};const d=u.data,c={};for(const e of d){const t=`${e.month} ${e.year}`;c[t]=e.target_amount}const g=Object.keys(n).sort(((e,t)=>new Date(e)-new Date(t))),p=Object.values(n).reduce(((e,t)=>e+t),0),w=(new Date).toLocaleString("default",{month:"long",year:"numeric"}),R=n[w]||0;return{status:"OK",data:{labels:g,datasets:[{label:"Sales",data:g.map((e=>n[e])),backgroundColor:"rgba(100, 199, 202, 0.75)"},{label:"Target",data:g.map((e=>c[e]||0)),backgroundColor:"#c62828"}],total:p,currentMonth:R}}};export const getSalesDataByDateRange=async(e,t,a="")=>{const s=await createClient(),r=new Date(e),n=new Date(t);let o=s.from("events").select("created_at,name,email, scope_of_work, inquiry:inquiries(id), status").gte("created_at",r.toISOString()).lte("created_at",n.toISOString()).eq("status","ACTIVE").order("created_at",{ascending:!0});const i=await o;if(i.error)return{status:"ERROR",message:i.error.message};let l=i.data;a&&""!==a&&(l=l.filter((e=>e.scope_of_work?.some((e=>e.solution?.some((e=>e.toLowerCase().includes(a.toLowerCase()))))))));const m={},u=new Date(r);for(;u<=n;){const e=u.toISOString().split("T")[0];m[e]=0,u.setDate(u.getDate()+1)}const d=l.map((e=>e.inquiry.id)),c=await s.from("proposals").select("*").in("inquiry_id",d).eq("confirmed",!0);if(c.error)return{status:"ERROR",message:c.error.message};const g=c.data;for(const e of l){const t=new Date(e.created_at).toISOString().split("T")[0],a=g.filter((t=>t.inquiry_id===e.inquiry.id)).reduce(((e,t)=>e+t.total_amount),0);void 0!==m[t]&&(m[t]+=a)}const p=Object.keys(m).sort(),w=Object.values(m).reduce(((e,t)=>e+t),0);return{status:"OK",data:{labels:p,datasets:[{label:"Sales",data:p.map((e=>m[e])),backgroundColor:"rgba(54, 162, 235, 0.5)",borderColor:"rgba(54, 162, 235, 1)",borderWidth:1}],total:w}}};export const getTop5UpcomingEvents=async()=>{const e=await createClient(),t=new Date,a=new Date(t);a.setDate(t.getDate()+1);let s=await e.from("events").select("*, inquiry:inquiries(*), user:users(*)").eq("status","ACTIVE").gte("start_datetime",a.toISOString()).order("start_datetime",{ascending:!0}).limit(5);if(s.error)return await errorLogger("getTop5UpcomingEvents()",s.error.message),{status:"ERROR",message:s.error.message,data:[]};const r=s.data,n=r.map((e=>e.id)),o=await e.from("portal-events").select("*").in("event_id",n).order("event_code",{ascending:!0});if(o.error)return await errorLogger("portal-events batch fetch",o.error.message),{status:"ERROR",message:o.error.message,data:[]};const i=o.data;for(const e of r)e.portal_events=i.filter((t=>t.event_id===e.id));return{status:"OK",data:r}};export const getMonthlyTargets=async()=>{const e=await createClient(),t=await e.from("targets").select("*").order("month",{ascending:!1});if(t.error)return await errorLogger("getTargets()",t.error.message),{status:"ERROR",message:t.error.message,data:null};const a=new Date,s=months[a.getMonth()],r=a.getFullYear();return{status:"OK",message:null,data:t.data.filter((e=>e.month===s&&Number(e.year)===r))}};export const getTarget=async e=>{const t=await createClient(),a=await t.from("targets").select("*").eq("id",e);return a.error?(await errorLogger("getTarget()",a.error.message),{status:"ERROR",message:a.error.message,data:null}):a.data.length>0?{status:"OK",message:null,data:a.data[0]}:{status:"ERROR",message:"Unable to get client",data:null}};export const getTargets=async()=>{const e=await createClient(),t=await e.from("targets").select("*").neq("status","DELETED").order("month",{ascending:!1});return t.error?(await errorLogger("getTargets()",t.error.message),{status:"ERROR",message:t.error.message,data:null}):{status:"OK",message:null,data:t.data}};export const addTargets=async e=>{try{const t=await createClient();let a=await getUser();const s=a.data,r=new Date,n=e.map((e=>({...e,user_id:s.id,created_at:r})));return a=await t.from("targets").upsert(n,{onConflict:["email"]}),a.error?(await errorLogger("addTargets()",a.error.message),{status:"ERROR",message:a.error.message,data:null}):{status:"OK",message:null,data:null}}catch(e){return await errorLogger("addTargets()",e),{status:"ERROR",message:null,data:null}}};export const addTarget=async e=>{const t=await createClient(),a=(await getUser()).data,s=await t.from("targets").insert({month:e.month,year:e.year,target_amount:e.target_amount,sales_amount:e.sales_amount,user_id:a.id,status:"ACTIVE",created_at:new Date,activity:[{message:`<p class='mb-0'>Target added by ${a.first_name}</p>`,date_time:new Date}]});return s.error?(await errorLogger("addTarget()",s.error.message),{status:"ERROR",message:s.error.message,data:null}):{status:"OK",message:null,data:null}};export const editTarget=async e=>{const t=await createClient();let a=await getUser();const s=a.data;return a=await t.from("targets").update({month:e.month||"",year:e.year||0,target_amount:void 0!==e.target_amount?e.target_amount:0,sales_amount:void 0!==e.sales_amount?e.sales_amount:0,activity:[{message:"<p class='mb-0'>Event logistics edited by "+s.first_name+"</p>",date_time:new Date}]}).eq("id",e.id),a.error&&await errorLogger("editTarget()",a.error.message),{status:"OK",message:null,data:null}};export const deletetarget=async e=>{const t=await createClient();let a=await getUser();const s=a.data;return a=await t.from("targets").update({status:"DELETED",activity:[{message:"<p class='mb-0'>target deleted by "+s.first_name+"</p>",date_time:new Date}]}).eq("id",e.id),a.error?(await errorLogger("deletetarget()",a.error.message),{status:"ERROR",message:a.error.message,data:null}):{status:"OK",message:null,data:null}};export const getFilteredInquiries=async()=>{const e=await createClient(),t=await e.from("inquiries").select("\n      *,\n      user:users(*),\n      proposals:proposals!proposals_inquiry_id_fkey(*)\n    ").order("start_datetime",{ascending:!0});if(t.error)return await errorLogger("getFilteredInquiries()",t.error.message),{status:"ERROR",message:t.error.message,data:null};return{status:"OK",message:null,data:t.data.map((e=>{const t=(e.proposals||[]).filter((e=>!0===e.confirmed));return{...e,proposals:t,total_sales:t.reduce(((e,t)=>e+Number(t.total_amount||0)),0)}}))}};